import logging
import os
import asyncio
import threading
import base64
from flask import Flask
from telegram import Update
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters
from pydub import AudioSegment
import google.generativeai as genai

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
ALLOWED_GROUP_ID = os.environ.get('ALLOWED_GROUP_ID')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API ---
model = None
try:
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash')
        logger.info("Gemini API —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    else:
        logger.error("–ö–ª—é—á GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Gemini API: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = update.message.chat_id
    if ALLOWED_GROUP_ID and str(chat_id) != ALLOWED_GROUP_ID and update.message.chat.type != 'private':
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã start –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
        return

    user = update.effective_user
    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫.",
    )

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    chat_id = update.message.chat_id
    if ALLOWED_GROUP_ID and str(chat_id) != ALLOWED_GROUP_ID and update.message.chat.type != 'private':
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
        return
        
    if not model:
        await update.message.reply_text("üö´ –û—à–∏–±–∫–∞: API Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    message = update.message
    media_source = message.voice or message.audio or message.video_note
    if not media_source:
        return

    processing_message = await message.reply_text("üß† –ü–æ–ª—É—á–∏–ª. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É...")
    
    file_path_original = None
    file_path_mp3 = None

    try:
        media_file = await media_source.get_file()
        
        file_path_original = f"downloads/{media_source.file_unique_id}"
        file_path_mp3 = f"downloads/{media_source.file_unique_id}.mp3"
        os.makedirs("downloads", exist_ok=True)

        await media_file.download_to_drive(file_path_original)
        logger.info(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {file_path_original}")

        sound = AudioSegment.from_file(file_path_original)
        sound.export(file_path_mp3, format="mp3")
        logger.info(f"–§–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {file_path_mp3}")

        # --- –ù–û–í–´–ô –ú–ï–¢–û–î, –ö–û–¢–û–†–´–ô –í–´ –ù–ê–®–õ–ò ---
        # 1. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
        with open(file_path_mp3, "rb") as audio_file:
            # 2. –ö–æ–¥–∏—Ä—É–µ–º –µ–≥–æ –≤ Base64
            encoded_string = base64.b64encode(audio_file.read()).decode('utf-8')

        # 3. –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
        audio_data_for_gemini = {
            "inline_data": {
                "mime_type": "audio/mpeg",  # MIME-—Ç–∏–ø –¥–ª—è MP3
                "data": encoded_string
            }
        }
        
        prompt = "–†–∞—Å—à–∏—Ñ—Ä—É–π —ç—Ç–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—É—é –º—É–∑—ã–∫—É –∏–ª–∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é —Ä–µ—á—å. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
        
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ upload_file
        response = await model.generate_content_async([prompt, audio_data_for_gemini])

        transcribed_text = response.text if response.text else "[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç]"

        await processing_message.edit_text(
            f"üìÑ **–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n\n{transcribed_text}"
        )

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {e}", exc_info=True)
        await processing_message.edit_text(
            "üòï –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    finally:
        if file_path_original and os.path.exists(file_path_original):
            os.remove(file_path_original)
        if file_path_mp3 and os.path.exists(file_path_mp3):
            os.remove(file_path_mp3)
        logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    chat_id = update.message.chat_id
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if update.message.chat.type == 'private':
        await update.message.reply_text(
            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."
        )
    else:
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞—Ç–∞ {chat_id}, –∫–∞–∫ –∏ –±—ã–ª–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞-–ø—É—Å—Ç—ã—à–∫–∏ ---

def run_flask_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—É—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –±—ã–ª –¥–æ–≤–æ–ª–µ–Ω."""
    app = Flask(__name__)
    @app.route('/')
    def index():
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling."
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO | filters.VIDEO_NOTE, handle_media))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask_app)
    flask_thread.daemon = True
    flask_thread.start()
    logger.info("Dummy Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(drop_pending_updates=True)


if __name__ == '__main__':
    main()

