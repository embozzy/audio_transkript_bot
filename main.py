# main.py
import logging
import os
import threading
from flask import Flask
from telegram import Update
from telegram.ext import Application, ContextTypes, CommandHandler, MessageHandler, filters

from pydub import AudioSegment
import google.generativeai as genai

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
# ID –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å. –ë–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
ALLOWED_GROUP_ID = os.environ.get('ALLOWED_GROUP_ID')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API ---
model = None
try:
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('models/gemini-1.5-flash')
        logger.info("Gemini API —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    else:
        logger.error("–ö–ª—é—á GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Gemini API: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –ö–æ–º–∞–Ω–¥–∞ /start –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–ª–∏ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    chat_type = update.message.chat.type
    chat_id_str = str(update.message.chat_id)

    if ALLOWED_GROUP_ID and chat_type != 'private' and chat_id_str != ALLOWED_GROUP_ID:
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã start –∏–∑ —á–∞—Ç–∞ {chat_id_str}")
        return
        
    user = update.effective_user
    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–æ–≤. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –∏–∑ —ç—Ç–∏—Ö –º–µ–¥–∏–∞, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.",
    )

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    # –ï—Å–ª–∏ ALLOWED_GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ
    if ALLOWED_GROUP_ID and str(update.message.chat.id) != ALLOWED_GROUP_ID:
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ —á–∞—Ç–∞ {update.message.chat.id}")
        return

    if not model:
        await update.message.reply_text("üö´ –û—à–∏–±–∫–∞: API Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    message = update.message
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–∏
    media_source = message.voice or message.audio or message.video_note
    if not media_source:
        return

    # –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
    processing_message = await message.reply_text("üß† –ü–æ–ª—É—á–∏–ª. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É...")

    try:
        media_file = await media_source.get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs("downloads", exist_ok=True)
        file_path_original = f"downloads/{media_source.file_unique_id}"
        file_path_mp3 = f"downloads/{media_source.file_unique_id}.mp3"

        await media_file.download_to_drive(file_path_original)
        
        # pydub —Å–∞–º –∏–∑–≤–ª–µ—á–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ –≤–∏–¥–µ–æ
        sound = AudioSegment.from_file(file_path_original)
        sound.export(file_path_mp3, format="mp3")

        audio_file_for_gemini = genai.upload_file(path=file_path_mp3)
        
        prompt = "–†–∞—Å—à–∏—Ñ—Ä—É–π –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
        response = await model.generate_content_async([prompt, audio_file_for_gemini])

        transcribed_text = response.text if response.text else "[–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç]"

        await processing_message.edit_text(f"üìÑ **–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**\n\n{transcribed_text}")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {e}", exc_info=True)
        await processing_message.edit_text("üòï –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if os.path.exists(file_path_original):
            os.remove(file_path_original)
        if os.path.exists(file_path_mp3):
            os.remove(file_path_mp3)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if ALLOWED_GROUP_ID and str(update.message.chat.id) != ALLOWED_GROUP_ID:
        logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞—Ç–∞ {update.message.chat.id}")
        return
        
    await update.message.reply_text(
        "–Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–µ–∫."
    )

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä-–ø—É—Å—Ç—ã—à–∫–∞ –¥–ª—è Render ---

def run_flask_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—É—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –±—ã–ª –¥–æ–≤–æ–ª–µ–Ω."""
    app = Flask(__name__)
    @app.route('/')
    def index():
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling."
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask_app)
    flask_thread.daemon = True
    flask_thread.start()
    logger.info("Dummy Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO | filters.VIDEO_NOTE, handle_media))
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∏—Å–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))


    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞. drop_pending_updates=True —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç "–∑–∞—Å—Ç—Ä—è–≤—à–∏–µ" —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
